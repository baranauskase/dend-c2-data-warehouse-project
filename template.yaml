Transform: AWS::Serverless-2016-10-31

# Globals:
#   set of globals

# Description:
#   String

# Metadata:
#   template metadata

Parameters:
  RedshiftDeploy:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  RedshiftClusterIdentifier:
    Type: String
    Default: ''
  RedshiftMasterUser:
    Type: String
    Default: master
  RedshiftDBName:
    Type: String
    Default: udacity
  RedshiftNodeType:
    Type: String
    Default: dc2.large
    AllowedValues:
      - dc2.large    
  RedshiftClusterType:
    Type: String
    Default: single-node
    AllowedValues:
      - single-node
      - multi-node 
  RedshiftNumNodes:
    Type: Number
    Default: 1 
  RedshiftPort:
    Type: Number
    Default: 5439
  AirflowUsername:
    Type: String
    Default: airflow_redshift_user

Conditions:
  RedshiftDeployTrue: 
    !Equals
      - 'true'
      - !Ref RedshiftDeploy
  RedshiftSingleNodeTrue: !Equals [ !Ref RedshiftClusterType, 'single-node' ]
  RedshiftClusterIdentifierNull: !Equals [ !Ref RedshiftClusterIdentifier, '']

Resources:
  RedshiftRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - redshift.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'

  RedshiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Authorise redshift cluster access
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref RedshiftPort
          ToPort: !Ref RedshiftPort
          CidrIp: 0.0.0.0/0

  RedshiftClusterMasterUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is a Redshift cluster Master user credentials'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${RedshiftMasterUser}"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludePunctuation: true
        ExcludeCharacters: >
          '@/\%"

  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Cluster subnet group
      SubnetIds: 
        - !Ref PublicSubnet

  RedshiftCluster:
    Type: 'AWS::Redshift::Cluster'
    Condition: RedshiftDeployTrue
    DependsOn: AttachGateway
    Properties:
      ClusterIdentifier: !If [ RedshiftClusterIdentifierNull, !Ref 'AWS::NoValue', !Ref RedshiftClusterIdentifier]
      MasterUsername: !Sub '{{resolve:secretsmanager:${RedshiftClusterMasterUserSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RedshiftClusterMasterUserSecret}::password}}'
      DBName: !Ref RedshiftDBName
      NodeType: !Ref RedshiftNodeType
      ClusterType: !Ref RedshiftClusterType
      NumberOfNodes: !If [ RedshiftSingleNodeTrue, !Ref 'AWS::NoValue', !Ref RedshiftNumNodes]
      VpcSecurityGroupIds:
        - !Ref RedshiftSecurityGroup
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      IamRoles:
        - !GetAtt RedshiftRole.Arn
      PubliclyAccessible: true
      Port: !Ref RedshiftPort

  AirflowRedshiftUser:
    Type: AWS::IAM::User
    Properties: 
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AmazonRedshiftFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      UserName: !Ref AirflowUsername

  AirflowRedshiftUserAccessKey:      
    Type: AWS::IAM::AccessKey
    DependsOn: AirflowRedshiftUser
    Properties: 
      UserName: !Ref AirflowUsername

  AccountAdminUser:
    Type: AWS::IAM::User
    Properties: 
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      UserName: admin

  AdminUserAccessKey:      
    Type: AWS::IAM::AccessKey
    DependsOn: AccountAdminUser
    Properties: 
      UserName: !Ref AccountAdminUser
    
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-${AWS::AccountId}'


Outputs:
  AirflowRedshiftUserAccessKeyId:
    Description: Airflow User Access Key ID
    Value: !Ref AirflowRedshiftUserAccessKey
  AirflowRedshiftUserSecretAccessKey:
    Description: Airflow User Secret Access Key
    Value: !GetAtt AirflowRedshiftUserAccessKey.SecretAccessKey   
  AdminUserAccessKeyId:
    Description: Admin User Access Key ID
    Value: !Ref AdminUserAccessKey
  AdminUserSecretAccessKey:
    Description: Admin User Secret Access Key
    Value: !GetAtt AdminUserAccessKey.SecretAccessKey
  RedshiftEndpointAddress:
    Condition: RedshiftDeployTrue
    Description: Redshift Cluster Endpoint Address
    Value: !GetAtt RedshiftCluster.Endpoint.Address   
  RedshiftRoleArn:
    Description: Redshift Cluster Role ARN
    Value: !GetAtt RedshiftRole.Arn    
